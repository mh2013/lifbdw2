
--Exercice 8 
--TEST DFS --
   --CODE_REGION -> REGION VRAI
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION,REGION
         FROM TPCSV_ETA_BRUT));
   --REGION -> CODE_REGION VRAI
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT REGION
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT REGION,CODE_REGION
         FROM TPCSV_ETA_BRUT));
   --CODE_DEPARTEMENT -> DEPARTEMENT VRAI
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT,DEPARTEMENT
         FROM TPCSV_ETA_BRUT));
   --DEPARTEMENT-> CODE_DEPARTEMENT VRAI
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT DEPARTEMENT
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT DEPARTEMENT,CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT));
   --CODE DEPARTEMENT -> CODE REGION VRAI
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT,CODE_REGION
         FROM TPCSV_ETA_BRUT));
   --CODE REGION -> CODE DEPARTEMENT FAUX
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION,CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT));
         
  --CONTRE EXEMPLE 
  SELECT t1.CODE_REGION,t2.CODE_REGION,t1.CODE_DEPARTEMENT,t2.CODE_DEPARTEMENT
  FROM TPCSV_ETA_BRUT t1,TPCSV_ETA_BRUT t2
  WHERE t1.CODE_REGION=t2.CODE_REGION AND t1.CODE_DEPARTEMENT <> t2.CODE_DEPARTEMENT AND t1.CODE_DEPARTEMENT < t2.CODE_DEPARTEMENT 
  ORDER BY t1.CODE_REGION,t2.CODE_REGION ASC
  --CODE ACADEMIE -> ACADEMIE    VRAI   
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE,ACADEMIE
         FROM TPCSV_ETA_BRUT));
 --ACADEMIE -> CODE ACADEMIE   VRAI    
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT ACADEMIE
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT ACADEMIE,CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT)); 
 --CODE ACADEMIE -> CODE REGION  VRAI   
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE,CODE_REGION
         FROM TPCSV_ETA_BRUT));
 --CODE REGION -> CODE ACADEMIE FAUX 
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_REGION,CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT));
 --CONTRE EXEMPLE 
  SELECT t1.CODE_REGION,t2.CODE_REGION,t1.CODE_ACADEMIE,t2.CODE_ACADEMIE
  FROM TPCSV_ETA_BRUT t1,TPCSV_ETA_BRUT t2
  WHERE t1.CODE_REGION=t2.CODE_REGION AND t1.CODE_ACADEMIE <> t2.CODE_ACADEMIE AND t1.CODE_ACADEMIE < t2.CODE_ACADEMIE 
  ORDER BY t1.CODE_REGION,t2.CODE_REGION ASC
 --CODE DEPARTEMENT -> CODE ACADEMIE  VRAI   
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_DEPARTEMENT,CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT));
 --CODE ACADEMIE -> CODE_DEPARTEMENT  FAUX     
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE
         FROM TPCSV_ETA_BRUT))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT CODE_ACADEMIE,CODE_DEPARTEMENT
         FROM TPCSV_ETA_BRUT));
 --CONTRE EXEMPLE 
  SELECT t1.CODE_ACADEMIE,t2.CODE_ACADEMIE,t1.CODE_DEPARTEMENT,t2.CODE_DEPARTEMENT
  FROM TPCSV_ETA_BRUT t1,TPCSV_ETA_BRUT t2
  WHERE t1.CODE_ACADEMIE=t2.CODE_ACADEMIE AND t1.CODE_DEPARTEMENT <> t2.CODE_DEPARTEMENT AND t1.CODE_DEPARTEMENT < t2.CODE_DEPARTEMENT 
  ORDER BY t1.CODE_ACADEMIE,t2.CODE_ACADEMIE ASC;
  
  
  -- EXERCICE 9 
 --1)
  DROP TABLE TPCSV_REGION;
  
  CREATE TABLE TPCSV_REGION(
  CODE_REGION VARCHAR2(26 BYTE) NOT NULL PRIMARY KEY, 
  REGION VARCHAR2(128 BYTE));
  
  DROP TABLE TPCSV_DPT;
  
   CREATE TABLE TPCSV_DPT(
   CODE_DEPARTEMENT VARCHAR2(26 BYTE) NOT NULL PRIMARY KEY, 
   DEPARTEMENT VARCHAR2(26 BYTE),
   CODE_REGION VARCHAR2(26 BYTE),
   FOREIGN KEY (CODE_REGION) REFERENCES TPCSV_REGION(CODE_REGION) ON DELETE SET NULL);
  
  DROP TABLE TPCSV_ACADEMIE;
  
  CREATE TABLE TPCSV_ACADEMIE(
  CODE_ACADEMIE VARCHAR2(26 BYTE)NOT NULL PRIMARY KEY, 
  ACADEMIE VARCHAR2(26 BYTE),
  CODE_REGION VARCHAR2(26 BYTE),
  FOREIGN KEY (CODE_REGION) REFERENCES TPCSV_REGION(CODE_REGION) ON DELETE SET NULL);
  
  --2)
  INSERT INTO TPCSV_REGION 
  SELECT DISTINCT CODE_REGION,REGION 
  FROM TPCSV_ETA_BRUT;
  
  INSERT INTO TPCSV_DPT 
  SELECT DISTINCT CODE_DEPARTEMENT,DEPARTEMENT,CODE_REGION
  FROM TPCSV_ETA_BRUT;
  
  INSERT INTO TPCSV_ACADEMIE
  SELECT DISTINCT CODE_ACADEMIE,ACADEMIE,CODE_REGION
  FROM TPCSV_ETA_BRUT;
  
   --exercice 10 
  
  --1)
  DROP TABLE TPCSV_DOMAINE;
  
  CREATE TABLE TPCSV_DOMAINE(
  CODE_DOMAINE VARCHAR2(26 BYTE)NOT NULL PRIMARY KEY, 
  NOM_DOMAINE VARCHAR2(128 BYTE));
  
  DROP TABLE TPCSV_DISCIPLINE;
  
  CREATE TABLE TPCSV_DISCIPLINE(
  CODE_DISCIPLINE VARCHAR2(26 BYTE)NOT NULL PRIMARY KEY, 
  NOM_DISCIPLINE VARCHAR2(128 BYTE),
  CODE_DOMAINE VARCHAR2(26 BYTE),
  FOREIGN KEY (CODE_DOMAINE) REFERENCES TPCSV_DOMAINE(CODE_DOMAINE) ON DELETE SET NULL);
  
  --2)(a verifier)
  INSERT INTO TPCSV_DOMAINE
  SELECT DISTINCT CODE_DOMAINE,NOM_DOMAINE
  FROM TPCSV_INS_BRUT;

INSERT INTO TPCSV_DISCIPLINE
  SELECT DISTINCT CODE_DISCIPLINE,NOM_DISCIPLINE,CODE_DOMAINE
  FROM TPCSV_INS_BRUT
  WHERE CODE_DISCIPLINE not in (select min(CODE_DISCIPLINE)
                                from TPCSV_INS_BRUT
                                group by NOM_Domaine
                                having count (distinct CODE_DISCIPLINE)>1);
  --2)
  
  INSERT INTO TPCSV_DISCIPLINE
  SELECT DISTINCT CODE_DISCIPLINE,NOM_DISCIPLINE,CODE_DOMAINE
  FROM TPCSV_INS_BRUT
  ORDER BY CODE_DISCIPLINE ASC ;
  
  INSERT INTO TPCSV_DOMAINE
  SELECT DISTINCT CODE_DOMAINE,NOM_DOMAINE
  FROM TPCSV_INS_BRUT;
  
  
  --EXERCICE 11
  --1)
  ---verifier que les 7 chiffres d'etablissement sont un identifiant
  select distinct LIBELLE
from TPCSV_ETA_BRUT
group by libelle
having count(SUBSTR(identifiant,1,7))>1;
  --SECTEUR ETABLISSEMENT N'ADMET QUE DEUX VALEURS 
  SELECT COUNT(DISTINCT SECTEUR_ETABLISSEMENT)
  FROM TPCSV_ETA_BRUT;
  
  --2)
drop table tpcsv_eta;
create table tpcsv_eta(
id_etablissement VARCHAR2(28 BYTE) not null primary key,
num_etablissement VARCHAR2(28 BYTE) unique,
LIBELLE_ETABLISSEMENT VARCHAR2(128 BYTE),
SIGLE_ETABLISSEMENT VARCHAR2(28 BYTE),
TYPE_ETABLISSEMENT VARCHAR2(128 BYTE),
SECTEUR_ETABLISSEMENT VARCHAR2(26 BYTE),
SITE_INTERNET VARCHAR2(128 BYTE),
CODE_DEPARTEMENT VARCHAR2(26 BYTE),
STATUT_JURIDIQUE_COURT VARCHAR2(26 BYTE)
);

--3)
insert into TPCSV_ETA
select SUBSTR(identifiant,1,7),identifiant,LIBELLE,SIGLE,TYPE_ETABLISSEMENT,SECTEUR_ETABLISSEMENT,SITE_INTERNET,CODE_DEPARTEMENT,STATUT_JURIDIQUE_COURT
from TPCSV_ETA_BRUT;

insert into TPCSV_ETA (id_etablissement,NUM_ETABLISSEMENT,libelle_etablissement,code_departement) values('0332929','0332929E','Bordeaux 4 - Montesquieu','D033');
insert into TPCSV_ETA (id_etablissement,NUM_ETABLISSEMENT,libelle_etablissement,code_departement) values('0341087','0332929X','Montpellier 1','D034');
insert into TPCSV_ETA (id_etablissement,NUM_ETABLISSEMENT,libelle_etablissement,code_departement) values('0331765','0331765P','Bordeaux 2 - victor Segalen','D033');
insert into TPCSV_ETA (id_etablissement,NUM_ETABLISSEMENT,libelle_etablissement,code_departement) values('0341088','0341088Y','Montpellier 2 - Sciences techniques du Languedoc','D034');
insert into TPCSV_ETA (id_etablissement,NUM_ETABLISSEMENT,libelle_etablissement,code_departement) values('0331764','0331764N','Bordeaux 1 - Sciences technologies','D033');

--exo 12
--1)
set serveroutput on

CREATE OR REPLACE FUNCTION isNumber( v_chaine IN varchar2 )
RETURN NUMBER
IS
  BEGIN
    RETURN to_number(v_chaine) ;
  EXCEPTION
  WHEN VALUE_ERROR THEN
  RETURN NULL;
  END;

declare
begin
DBMS_OUTPUT.PUT_LINE(isNumber('A'));
end;

  --2)

--REGION -> SALAIRE_NET_MEDIAN_REGION vrai 
    (SELECT COUNT(*)
   FROM (SELECT DISTINCT REGION,ANNEE
         FROM TPCSV_ETA_BRUT t1 INNER JOIN TPCSV_INS_BRUT t2 ON t1.CODE_ACADEMIE = t2.CODE_ACADEMIE))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT t1.REGION,t2.ANNEE,t2.SALAIRE_NET_MEDIAN_REGION
         FROM TPCSV_ETA_BRUT t1 INNER JOIN TPCSV_INS_BRUT t2 ON t1.CODE_ACADEMIE = t2.CODE_ACADEMIE));
         
--REGION ->TAUX_CHOMAGE_REGIONAL VRAI
(SELECT COUNT(*)
   FROM (SELECT DISTINCT REGION,ANNEE
         FROM TPCSV_ETA_BRUT t1 INNER JOIN TPCSV_INS_BRUT t2 ON t1.CODE_ACADEMIE = t2.CODE_ACADEMIE))
         MINUS
   (SELECT COUNT(*)
   FROM (SELECT DISTINCT t1.REGION,t2.ANNEE,t2.TAUX_CHOMAGE_REGIONAL
         FROM TPCSV_ETA_BRUT t1 INNER JOIN TPCSV_INS_BRUT t2 ON t1.CODE_ACADEMIE = t2.CODE_ACADEMIE));
        
--3) i il ne sert à rien de tester si les statistiques SALAIRE_NET_MEDIAN_REGION et TAUX_CHOMAGE_REGIONAL dépendent fonctionnellement de l’académie ou du département car on sait déjà qu'ils dépendent de region or region dépend de code region et code region code academie et code departement dépendent de code region 

--4)
DROP TABLE TPCSV_REGION_STATS;
  
CREATE TABLE TPCSV_REGION_STATS(
REGION VARCHAR2(128 BYTE),
ANNEE NUMBER(6,0) NOT NULL,
CODE_REGION VARCHAR2(26 BYTE),
TAUX_CHOMAGE_REGIONAL VARCHAR2(26 BYTE), 
SALAIRE_NET_MEDIAN_REGION VARCHAR2(20 BYTE),
PRIMARY KEY (REGION,ANNEE),
FOREIGN KEY (CODE_REGION) REFERENCES TPCSV_REGION(CODE_REGION) ON DELETE SET NULL);

INSERT INTO TPCSV_REGION_STATS
SELECT DISTINCT t1.REGION,t2.ANNEE,t1.CODE_REGION,t2.TAUX_CHOMAGE_REGIONAL,t2.SALAIRE_NET_MEDIAN_REGION
FROM TPCSV_ETA_BRUT t1 INNER JOIN TPCSV_INS_BRUT t2 ON t1.CODE_ACADEMIE = t2.CODE_ACADEMIE;

---exo13)
---1)drop table tpcsv_stats;

create table tpcsv_stats(
CODE_DISCIPLINE VARCHAR2(26 BYTE) not null,
NOM_DISCIPLINE VARCHAR2(128 BYTE),
NUM_ETABLISSEMENT VARCHAR2(26 BYTE) not null,
ANNEE NUMBER(6,0) not null,
NOM_ETABLISSEMENT VARCHAR2(128 BYTE),
NB_REPONSES NUMBER(6,0),
TAUX_REPONSE NUMBER(5,0),
POIDS_DISCIPLINE VARCHAR2(20 BYTE),
TAUX_INSERTION VARCHAR2(26 BYTE),
TAUX_CADRES_INTERMEDIAIRES VARCHAR2(26 BYTE),
TAUX_STABLES VARCHAR2(26 BYTE),
TAUX_TEMPS_PLEIN VARCHAR2(26 BYTE),
SALAIRE_NET_MEDIAN VARCHAR2(26 BYTE),
SALAIRE_BRUT_ANNUEL VARCHAR2(26 BYTE),
TAUX_DIPLOMES_BOURSIERS VARCHAR2(20 BYTE),
TAUX_CHOMAGE_REGIONAL VARCHAR2(26 BYTE),
SALAIRE_NET_MEDIAN_REGION VARCHAR2(20 BYTE),
TAUX_CADRES VARCHAR2(26 BYTE),
TAUX_EXTERIEURS VARCHAR2(26 BYTE),
TAUX_FEMMES VARCHAR2(26 BYTE),
ID_ETABLISSEMENT VARCHAR2(28 BYTE),
foreign key (ID_ETABLISSEMENT) references tpcsv_eta(ID_ETABLISSEMENT),
PRIMARY KEY(CODE_DISCIPLINE,NUM_ETABLISSEMENT,ANNEE));

---2)insert into tpcsv_stats
select distinct
CODE_DISCIPLINE,
NOM_DISCIPLINE,
TPCSV_INS_BRUT.NUM_ETABLISSEMENT,
ANNEE,
NOM_ETABLISSEMENT, 
NB_REPONSES, 
TAUX_REPONSE, 
POIDS_DISCIPLINE, 
TAUX_INSERTION, 
TAUX_CADRES_INTERMEDIAIRES, 
TAUX_STABLES, 
TAUX_TEMPS_PLEIN, 
SALAIRE_NET_MEDIAN, 
SALAIRE_BRUT_ANNUEL, 
TAUX_DIPLOMES_BOURSIERS, 
TAUX_CHOMAGE_REGIONAL, 
SALAIRE_NET_MEDIAN_REGION, 
TAUX_CADRES, 
TAUX_EXTERIEURS,
TAUX_FEMMES,
tpcsv_eta.ID_ETABLISSEMENT
from TPCSV_INS_BRUT inner join tpcsv_eta on TPCSV_INS_BRUT.NUM_ETABLISSEMENT = tpcsv_eta.NUM_ETABLISSEMENT
where TPCSV_INS_BRUT.NOM_DISCIPLINE not like 'Ensemble%';

---3)
--il s'agit bien du meme nombre de tuples car id_etablissement n'a pas été calculé avec les identifiants des universités fictives('UNIV')

  
  --EXERCICE 14
  
  --1)
select NOM_DISCIPLINE,
round(avg(isNumber(NB_REPONSES))) AS moy_nb_rep, 
round(avg(isNumber(TAUX_REPONSE))) AS moy_taux_rep, 
round(avg(isNumber(POIDS_DISCIPLINE))) AS moy_discipline, 
round(avg(isNumber(TAUX_INSERTION))) AS moy_insertion, 
round(avg(isNumber(TAUX_CADRES_INTERMEDIAIRES))) AS moy_cadres, 
round(avg(isNumber(TAUX_STABLES))) AS moy_stables, 
round(avg(isNumber(TAUX_TEMPS_PLEIN))) as moy_tps_plein, 
round(avg(isNumber(SALAIRE_NET_MEDIAN)))as moy_sal_net_med, 
round(avg(isNumber(SALAIRE_BRUT_ANNUEL))) as moy_sal_brt_an, 
round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL))) as SALAIRE_BRUT_ANNUEL_NORMALISE,
round(avg(isNumber(TAUX_DIPLOMES_BOURSIERS))) as moy_dipl, 
round(avg(isNumber(TAUX_CHOMAGE_REGIONAL))) as moy_chom_reg, 
round(avg(isNumber(SALAIRE_NET_MEDIAN_REGION))) as moy_sal_net_med_reg, 
round(avg(isNumber(TAUX_CADRES))) as moy_cadre, 
round(avg(isNumber(TAUX_EXTERIEURS))) as moy_ext,
round(avg(isNumber(TAUX_FEMMES))) as moy_fem
from TPCSV_stats
group by NOM_DISCIPLINE;


 --2)
select a.NOM_DISCIPLINE,isNumber(a.TAUX_INSERTION)*isNumber(a.TAUX_STABLES)*t.SALAIRE_BRUT_ANNUEL_NORMALISE as I from
(select distinct NOM_DISCIPLINE,(round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL)))) as SALAIRE_BRUT_ANNUEL_NORMALISE
from tpcsv_stats
group by NOM_DISCIPLINE) t inner join TPCSV_STATS a on t.NOM_DISCIPLINE=a.NOM_DISCIPLINE;

--la discipline ayant le plus haut indicateur 
select NOM_DISCIPLINE from
(select a.NOM_DISCIPLINE,isNumber(a.TAUX_INSERTION)*isNumber(a.TAUX_STABLES)*t.SALAIRE_BRUT_ANNUEL_NORMALISE as I from
(select distinct NOM_DISCIPLINE,(round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL)))) as SALAIRE_BRUT_ANNUEL_NORMALISE
from tpcsv_stats
group by NOM_DISCIPLINE) t inner join TPCSV_STATS a on t.NOM_DISCIPLINE=a.NOM_DISCIPLINE)
where I = (select max(I) from (select a.NOM_DISCIPLINE,isNumber(a.TAUX_INSERTION)*isNumber(a.TAUX_STABLES)*t.SALAIRE_BRUT_ANNUEL_NORMALISE as I from
(select distinct NOM_DISCIPLINE,(round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL)))) as SALAIRE_BRUT_ANNUEL_NORMALISE
from tpcsv_stats
group by NOM_DISCIPLINE) t inner join TPCSV_STATS a on t.NOM_DISCIPLINE=a.NOM_DISCIPLINE));


--la discipline e ayant le plus bas indicateur 
select distinct NOM_DISCIPLINE from
(select a.NOM_DISCIPLINE,isNumber(a.TAUX_INSERTION)*isNumber(a.TAUX_STABLES)*t.SALAIRE_BRUT_ANNUEL_NORMALISE as I from
(select distinct NOM_DISCIPLINE,(round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL)))) as SALAIRE_BRUT_ANNUEL_NORMALISE
from tpcsv_stats
group by NOM_DISCIPLINE) t inner join TPCSV_STATS a on t.NOM_DISCIPLINE=a.NOM_DISCIPLINE)
where I = (select min(I) from (select a.NOM_DISCIPLINE,isNumber(a.TAUX_INSERTION)*isNumber(a.TAUX_STABLES)*t.SALAIRE_BRUT_ANNUEL_NORMALISE as I from
(select distinct NOM_DISCIPLINE,(round(avg(isNumber(SALAIRE_BRUT_ANNUEL))*100/max(isNumber(SALAIRE_BRUT_ANNUEL)))) as SALAIRE_BRUT_ANNUEL_NORMALISE
from tpcsv_stats
group by NOM_DISCIPLINE) t inner join TPCSV_STATS a on t.NOM_DISCIPLINE=a.NOM_DISCIPLINE));

---3)
create or replace view DISCIPLINE_REPRESENTE as
select nom_domaine,annee,NUM_ETABLISSEMENT,max(maxi_poids) as maxi_sum_poids from
(select nom_domaine,annee,NUM_ETABLISSEMENT,sum((ISNUMBER(POIDS_DISCIPLINE))) as sum_poids
from TPCSV_INS_BRUT
group by NOM_DOMAINE,annee,NUM_ETABLISSEMENT)
group by NOM_DOMAINE,annee,NUM_ETABLISSEMENT;


--4)
(SELECT DISTINCT NOM_ETABLISSEMENT,NOM_DOMAINE
      FROM TPCSV_INS_BRUT 
      WHERE ANNEE = '2011'
      GROUP BY NOM_ETABLISSEMENT,NOM_DOMAINE)
 MINUS
(SELECT DISTINCT NOM_ETABLISSEMENT,NOM_DOMAINE
 FROM TPCSV_INS_BRUT
 WHERE ANNEE < '2011'
 GROUP BY NOM_ETABLISSEMENT,NOM_DOMAINE) ;